# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_yafqt', [dirname(__file__)])
        except ImportError:
            import _yafqt
            return _yafqt
        if fp is not None:
            try:
                _mod = imp.load_module('_yafqt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _yafqt = swig_import_helper()
    del swig_import_helper
else:
    import _yafqt
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_floatp():
  return _yafqt.new_floatp()
new_floatp = _yafqt.new_floatp

def copy_floatp(*args):
  return _yafqt.copy_floatp(*args)
copy_floatp = _yafqt.copy_floatp

def delete_floatp(*args):
  return _yafqt.delete_floatp(*args)
delete_floatp = _yafqt.delete_floatp

def floatp_assign(*args):
  return _yafqt.floatp_assign(*args)
floatp_assign = _yafqt.floatp_assign

def floatp_value(*args):
  return _yafqt.floatp_value(*args)
floatp_value = _yafqt.floatp_value

def new_intp():
  return _yafqt.new_intp()
new_intp = _yafqt.new_intp

def copy_intp(*args):
  return _yafqt.copy_intp(*args)
copy_intp = _yafqt.copy_intp

def delete_intp(*args):
  return _yafqt.delete_intp(*args)
delete_intp = _yafqt.delete_intp

def intp_assign(*args):
  return _yafqt.intp_assign(*args)
intp_assign = _yafqt.intp_assign

def intp_value(*args):
  return _yafqt.intp_value(*args)
intp_value = _yafqt.intp_value

def new_uintp():
  return _yafqt.new_uintp()
new_uintp = _yafqt.new_uintp

def copy_uintp(*args):
  return _yafqt.copy_uintp(*args)
copy_uintp = _yafqt.copy_uintp

def delete_uintp(*args):
  return _yafqt.delete_uintp(*args)
delete_uintp = _yafqt.delete_uintp

def uintp_assign(*args):
  return _yafqt.uintp_assign(*args)
uintp_assign = _yafqt.uintp_assign

def uintp_value(*args):
  return _yafqt.uintp_value(*args)
uintp_value = _yafqt.uintp_value

def new_floatArray(*args):
  return _yafqt.new_floatArray(*args)
new_floatArray = _yafqt.new_floatArray

def delete_floatArray(*args):
  return _yafqt.delete_floatArray(*args)
delete_floatArray = _yafqt.delete_floatArray

def floatArray_getitem(*args):
  return _yafqt.floatArray_getitem(*args)
floatArray_getitem = _yafqt.floatArray_getitem

def floatArray_setitem(*args):
  return _yafqt.floatArray_setitem(*args)
floatArray_setitem = _yafqt.floatArray_setitem
class Settings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Settings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Settings, name)
    __repr__ = _swig_repr
    __swig_setmethods__["autoSave"] = _yafqt.Settings_autoSave_set
    __swig_getmethods__["autoSave"] = _yafqt.Settings_autoSave_get
    if _newclass:autoSave = _swig_property(_yafqt.Settings_autoSave_get, _yafqt.Settings_autoSave_set)
    __swig_setmethods__["autoSaveAlpha"] = _yafqt.Settings_autoSaveAlpha_set
    __swig_getmethods__["autoSaveAlpha"] = _yafqt.Settings_autoSaveAlpha_get
    if _newclass:autoSaveAlpha = _swig_property(_yafqt.Settings_autoSaveAlpha_get, _yafqt.Settings_autoSaveAlpha_set)
    __swig_setmethods__["closeAfterFinish"] = _yafqt.Settings_closeAfterFinish_set
    __swig_getmethods__["closeAfterFinish"] = _yafqt.Settings_closeAfterFinish_get
    if _newclass:closeAfterFinish = _swig_property(_yafqt.Settings_closeAfterFinish_get, _yafqt.Settings_closeAfterFinish_set)
    __swig_setmethods__["fileName"] = _yafqt.Settings_fileName_set
    __swig_getmethods__["fileName"] = _yafqt.Settings_fileName_get
    if _newclass:fileName = _swig_property(_yafqt.Settings_fileName_get, _yafqt.Settings_fileName_set)
    def __init__(self): 
        this = _yafqt.new_Settings()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yafqt.delete_Settings
    __del__ = lambda self : None;
Settings_swigregister = _yafqt.Settings_swigregister
Settings_swigregister(Settings)


def initGui():
  return _yafqt.initGui()
initGui = _yafqt.initGui

def createRenderWidget(*args):
  return _yafqt.createRenderWidget(*args)
createRenderWidget = _yafqt.createRenderWidget


