# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_yafrayinterface', [dirname(__file__)])
        except ImportError:
            import _yafrayinterface
            return _yafrayinterface
        if fp is not None:
            try:
                _mod = imp.load_module('_yafrayinterface', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _yafrayinterface = swig_import_helper()
    del swig_import_helper
else:
    import _yafrayinterface
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_floatp():
  return _yafrayinterface.new_floatp()
new_floatp = _yafrayinterface.new_floatp

def copy_floatp(*args):
  return _yafrayinterface.copy_floatp(*args)
copy_floatp = _yafrayinterface.copy_floatp

def delete_floatp(*args):
  return _yafrayinterface.delete_floatp(*args)
delete_floatp = _yafrayinterface.delete_floatp

def floatp_assign(*args):
  return _yafrayinterface.floatp_assign(*args)
floatp_assign = _yafrayinterface.floatp_assign

def floatp_value(*args):
  return _yafrayinterface.floatp_value(*args)
floatp_value = _yafrayinterface.floatp_value

def new_intp():
  return _yafrayinterface.new_intp()
new_intp = _yafrayinterface.new_intp

def copy_intp(*args):
  return _yafrayinterface.copy_intp(*args)
copy_intp = _yafrayinterface.copy_intp

def delete_intp(*args):
  return _yafrayinterface.delete_intp(*args)
delete_intp = _yafrayinterface.delete_intp

def intp_assign(*args):
  return _yafrayinterface.intp_assign(*args)
intp_assign = _yafrayinterface.intp_assign

def intp_value(*args):
  return _yafrayinterface.intp_value(*args)
intp_value = _yafrayinterface.intp_value

def new_uintp():
  return _yafrayinterface.new_uintp()
new_uintp = _yafrayinterface.new_uintp

def copy_uintp(*args):
  return _yafrayinterface.copy_uintp(*args)
copy_uintp = _yafrayinterface.copy_uintp

def delete_uintp(*args):
  return _yafrayinterface.delete_uintp(*args)
delete_uintp = _yafrayinterface.delete_uintp

def uintp_assign(*args):
  return _yafrayinterface.uintp_assign(*args)
uintp_assign = _yafrayinterface.uintp_assign

def uintp_value(*args):
  return _yafrayinterface.uintp_value(*args)
uintp_value = _yafrayinterface.uintp_value
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yafrayinterface.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _yafrayinterface.SwigPyIterator_value(self)
    def incr(self, n = 1): return _yafrayinterface.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _yafrayinterface.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _yafrayinterface.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _yafrayinterface.SwigPyIterator_equal(self, *args)
    def copy(self): return _yafrayinterface.SwigPyIterator_copy(self)
    def next(self): return _yafrayinterface.SwigPyIterator_next(self)
    def __next__(self): return _yafrayinterface.SwigPyIterator___next__(self)
    def previous(self): return _yafrayinterface.SwigPyIterator_previous(self)
    def advance(self, *args): return _yafrayinterface.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _yafrayinterface.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _yafrayinterface.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _yafrayinterface.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _yafrayinterface.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _yafrayinterface.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _yafrayinterface.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _yafrayinterface.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_floatArray(*args):
  return _yafrayinterface.new_floatArray(*args)
new_floatArray = _yafrayinterface.new_floatArray

def delete_floatArray(*args):
  return _yafrayinterface.delete_floatArray(*args)
delete_floatArray = _yafrayinterface.delete_floatArray

def floatArray_getitem(*args):
  return _yafrayinterface.floatArray_getitem(*args)
floatArray_getitem = _yafrayinterface.floatArray_getitem

def floatArray_setitem(*args):
  return _yafrayinterface.floatArray_setitem(*args)
floatArray_setitem = _yafrayinterface.floatArray_setitem
class StrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _yafrayinterface.StrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yafrayinterface.StrVector___nonzero__(self)
    def __bool__(self): return _yafrayinterface.StrVector___bool__(self)
    def __len__(self): return _yafrayinterface.StrVector___len__(self)
    def pop(self): return _yafrayinterface.StrVector_pop(self)
    def __getslice__(self, *args): return _yafrayinterface.StrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _yafrayinterface.StrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _yafrayinterface.StrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _yafrayinterface.StrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _yafrayinterface.StrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _yafrayinterface.StrVector___setitem__(self, *args)
    def append(self, *args): return _yafrayinterface.StrVector_append(self, *args)
    def empty(self): return _yafrayinterface.StrVector_empty(self)
    def size(self): return _yafrayinterface.StrVector_size(self)
    def clear(self): return _yafrayinterface.StrVector_clear(self)
    def swap(self, *args): return _yafrayinterface.StrVector_swap(self, *args)
    def get_allocator(self): return _yafrayinterface.StrVector_get_allocator(self)
    def begin(self): return _yafrayinterface.StrVector_begin(self)
    def end(self): return _yafrayinterface.StrVector_end(self)
    def rbegin(self): return _yafrayinterface.StrVector_rbegin(self)
    def rend(self): return _yafrayinterface.StrVector_rend(self)
    def pop_back(self): return _yafrayinterface.StrVector_pop_back(self)
    def erase(self, *args): return _yafrayinterface.StrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _yafrayinterface.new_StrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _yafrayinterface.StrVector_push_back(self, *args)
    def front(self): return _yafrayinterface.StrVector_front(self)
    def back(self): return _yafrayinterface.StrVector_back(self)
    def assign(self, *args): return _yafrayinterface.StrVector_assign(self, *args)
    def resize(self, *args): return _yafrayinterface.StrVector_resize(self, *args)
    def insert(self, *args): return _yafrayinterface.StrVector_insert(self, *args)
    def reserve(self, *args): return _yafrayinterface.StrVector_reserve(self, *args)
    def capacity(self): return _yafrayinterface.StrVector_capacity(self)
    __swig_destroy__ = _yafrayinterface.delete_StrVector
    __del__ = lambda self : None;
StrVector_swigregister = _yafrayinterface.StrVector_swigregister
StrVector_swigregister(StrVector)

class colorOutput_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, colorOutput_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, colorOutput_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yafrayinterface.delete_colorOutput_t
    __del__ = lambda self : None;
    def putPixel(self, *args): return _yafrayinterface.colorOutput_t_putPixel(self, *args)
    def flush(self): return _yafrayinterface.colorOutput_t_flush(self)
    def flushArea(self, *args): return _yafrayinterface.colorOutput_t_flushArea(self, *args)
colorOutput_t_swigregister = _yafrayinterface.colorOutput_t_swigregister
colorOutput_t_swigregister(colorOutput_t)

class imageHandler_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imageHandler_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imageHandler_t, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def initForOutput(self, *args): return _yafrayinterface.imageHandler_t_initForOutput(self, *args)
    __swig_destroy__ = _yafrayinterface.delete_imageHandler_t
    __del__ = lambda self : None;
    def loadFromFile(self, *args): return _yafrayinterface.imageHandler_t_loadFromFile(self, *args)
    def loadFromMemory(self, *args): return _yafrayinterface.imageHandler_t_loadFromMemory(self, *args)
    def saveToFile(self, *args): return _yafrayinterface.imageHandler_t_saveToFile(self, *args)
    def putPixel(self, *args): return _yafrayinterface.imageHandler_t_putPixel(self, *args)
    def getPixel(self, *args): return _yafrayinterface.imageHandler_t_getPixel(self, *args)
imageHandler_t_swigregister = _yafrayinterface.imageHandler_t_swigregister
imageHandler_t_swigregister(imageHandler_t)

class imageOutput_t(colorOutput_t):
    __swig_setmethods__ = {}
    for _s in [colorOutput_t]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, imageOutput_t, name, value)
    __swig_getmethods__ = {}
    for _s in [colorOutput_t]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, imageOutput_t, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yafrayinterface.new_imageOutput_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yafrayinterface.delete_imageOutput_t
    __del__ = lambda self : None;
    def putPixel(self, *args): return _yafrayinterface.imageOutput_t_putPixel(self, *args)
    def flush(self): return _yafrayinterface.imageOutput_t_flush(self)
    def flushArea(self, *args): return _yafrayinterface.imageOutput_t_flushArea(self, *args)
imageOutput_t_swigregister = _yafrayinterface.imageOutput_t_swigregister
imageOutput_t_swigregister(imageOutput_t)

class yafrayInterface_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yafrayInterface_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yafrayInterface_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yafrayinterface.new_yafrayInterface_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yafrayinterface.delete_yafrayInterface_t
    __del__ = lambda self : None;
    def loadPlugins(self, *args): return _yafrayinterface.yafrayInterface_t_loadPlugins(self, *args)
    def startGeometry(self): return _yafrayinterface.yafrayInterface_t_startGeometry(self)
    def endGeometry(self): return _yafrayinterface.yafrayInterface_t_endGeometry(self)
    def getNextFreeID(self): return _yafrayinterface.yafrayInterface_t_getNextFreeID(self)
    def startTriMesh(self, *args): return _yafrayinterface.yafrayInterface_t_startTriMesh(self, *args)
    def startCurveMesh(self, *args): return _yafrayinterface.yafrayInterface_t_startCurveMesh(self, *args)
    def startTriMeshPtr(self, *args): return _yafrayinterface.yafrayInterface_t_startTriMeshPtr(self, *args)
    def endTriMesh(self): return _yafrayinterface.yafrayInterface_t_endTriMesh(self)
    def endCurveMesh(self, *args): return _yafrayinterface.yafrayInterface_t_endCurveMesh(self, *args)
    def addVertex(self, *args): return _yafrayinterface.yafrayInterface_t_addVertex(self, *args)
    def addTriangle(self, *args): return _yafrayinterface.yafrayInterface_t_addTriangle(self, *args)
    def addUV(self, *args): return _yafrayinterface.yafrayInterface_t_addUV(self, *args)
    def smoothMesh(self, *args): return _yafrayinterface.yafrayInterface_t_smoothMesh(self, *args)
    def paramsSetPoint(self, *args): return _yafrayinterface.yafrayInterface_t_paramsSetPoint(self, *args)
    def paramsSetString(self, *args): return _yafrayinterface.yafrayInterface_t_paramsSetString(self, *args)
    def paramsSetBool(self, *args): return _yafrayinterface.yafrayInterface_t_paramsSetBool(self, *args)
    def paramsSetInt(self, *args): return _yafrayinterface.yafrayInterface_t_paramsSetInt(self, *args)
    def paramsSetFloat(self, *args): return _yafrayinterface.yafrayInterface_t_paramsSetFloat(self, *args)
    def paramsSetColor(self, *args): return _yafrayinterface.yafrayInterface_t_paramsSetColor(self, *args)
    def paramsSetMatrix(self, *args): return _yafrayinterface.yafrayInterface_t_paramsSetMatrix(self, *args)
    def paramsSetMemMatrix(self, *args): return _yafrayinterface.yafrayInterface_t_paramsSetMemMatrix(self, *args)
    def paramsClearAll(self): return _yafrayinterface.yafrayInterface_t_paramsClearAll(self)
    def paramsStartList(self): return _yafrayinterface.yafrayInterface_t_paramsStartList(self)
    def paramsPushList(self): return _yafrayinterface.yafrayInterface_t_paramsPushList(self)
    def paramsEndList(self): return _yafrayinterface.yafrayInterface_t_paramsEndList(self)
    def createLight(self, *args): return _yafrayinterface.yafrayInterface_t_createLight(self, *args)
    def createTexture(self, *args): return _yafrayinterface.yafrayInterface_t_createTexture(self, *args)
    def createMaterial(self, *args): return _yafrayinterface.yafrayInterface_t_createMaterial(self, *args)
    def createCamera(self, *args): return _yafrayinterface.yafrayInterface_t_createCamera(self, *args)
    def createBackground(self, *args): return _yafrayinterface.yafrayInterface_t_createBackground(self, *args)
    def createIntegrator(self, *args): return _yafrayinterface.yafrayInterface_t_createIntegrator(self, *args)
    def createVolumeRegion(self, *args): return _yafrayinterface.yafrayInterface_t_createVolumeRegion(self, *args)
    def createImageHandler(self, *args): return _yafrayinterface.yafrayInterface_t_createImageHandler(self, *args)
    def createObject(self, *args): return _yafrayinterface.yafrayInterface_t_createObject(self, *args)
    def clearAll(self): return _yafrayinterface.yafrayInterface_t_clearAll(self)
    def render(self, *args): return _yafrayinterface.yafrayInterface_t_render(self, *args)
    def startScene(self, type = 0): return _yafrayinterface.yafrayInterface_t_startScene(self, type)
    def setInputGamma(self, *args): return _yafrayinterface.yafrayInterface_t_setInputGamma(self, *args)
    def abort(self): return _yafrayinterface.yafrayInterface_t_abort(self)
    def getRenderParameters(self): return _yafrayinterface.yafrayInterface_t_getRenderParameters(self)
    def getRenderedImage(self, *args): return _yafrayinterface.yafrayInterface_t_getRenderedImage(self, *args)
    def listImageHandlers(self): return _yafrayinterface.yafrayInterface_t_listImageHandlers(self)
    def listImageHandlersFullName(self): return _yafrayinterface.yafrayInterface_t_listImageHandlersFullName(self)
    def getImageFormatFromFullName(self, *args): return _yafrayinterface.yafrayInterface_t_getImageFormatFromFullName(self, *args)
    def getImageFullNameFromFormat(self, *args): return _yafrayinterface.yafrayInterface_t_getImageFullNameFromFormat(self, *args)
    def setDrawParams(self, on = True): return _yafrayinterface.yafrayInterface_t_setDrawParams(self, on)
    def getDrawParams(self): return _yafrayinterface.yafrayInterface_t_getDrawParams(self)
    def getVersion(self): return _yafrayinterface.yafrayInterface_t_getVersion(self)
    def printInfo(self, *args): return _yafrayinterface.yafrayInterface_t_printInfo(self, *args)
    def printWarning(self, *args): return _yafrayinterface.yafrayInterface_t_printWarning(self, *args)
    def printError(self, *args): return _yafrayinterface.yafrayInterface_t_printError(self, *args)
yafrayInterface_t_swigregister = _yafrayinterface.yafrayInterface_t_swigregister
yafrayInterface_t_swigregister(yafrayInterface_t)

class xmlInterface_t(yafrayInterface_t):
    __swig_setmethods__ = {}
    for _s in [yafrayInterface_t]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, xmlInterface_t, name, value)
    __swig_getmethods__ = {}
    for _s in [yafrayInterface_t]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, xmlInterface_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _yafrayinterface.new_xmlInterface_t()
        try: self.this.append(this)
        except: self.this = this
    def loadPlugins(self, *args): return _yafrayinterface.xmlInterface_t_loadPlugins(self, *args)
    def startGeometry(self): return _yafrayinterface.xmlInterface_t_startGeometry(self)
    def endGeometry(self): return _yafrayinterface.xmlInterface_t_endGeometry(self)
    def getNextFreeID(self): return _yafrayinterface.xmlInterface_t_getNextFreeID(self)
    def startTriMesh(self, *args): return _yafrayinterface.xmlInterface_t_startTriMesh(self, *args)
    def startCurveMesh(self, *args): return _yafrayinterface.xmlInterface_t_startCurveMesh(self, *args)
    def startTriMeshPtr(self, *args): return _yafrayinterface.xmlInterface_t_startTriMeshPtr(self, *args)
    def endTriMesh(self): return _yafrayinterface.xmlInterface_t_endTriMesh(self)
    def endCurveMesh(self, *args): return _yafrayinterface.xmlInterface_t_endCurveMesh(self, *args)
    def addVertex(self, *args): return _yafrayinterface.xmlInterface_t_addVertex(self, *args)
    def addTriangle(self, *args): return _yafrayinterface.xmlInterface_t_addTriangle(self, *args)
    def addUV(self, *args): return _yafrayinterface.xmlInterface_t_addUV(self, *args)
    def startVmap(self, *args): return _yafrayinterface.xmlInterface_t_startVmap(self, *args)
    def endVmap(self): return _yafrayinterface.xmlInterface_t_endVmap(self)
    def addVmapValues(self, *args): return _yafrayinterface.xmlInterface_t_addVmapValues(self, *args)
    def smoothMesh(self, *args): return _yafrayinterface.xmlInterface_t_smoothMesh(self, *args)
    def createLight(self, *args): return _yafrayinterface.xmlInterface_t_createLight(self, *args)
    def createTexture(self, *args): return _yafrayinterface.xmlInterface_t_createTexture(self, *args)
    def createMaterial(self, *args): return _yafrayinterface.xmlInterface_t_createMaterial(self, *args)
    def createCamera(self, *args): return _yafrayinterface.xmlInterface_t_createCamera(self, *args)
    def createBackground(self, *args): return _yafrayinterface.xmlInterface_t_createBackground(self, *args)
    def createIntegrator(self, *args): return _yafrayinterface.xmlInterface_t_createIntegrator(self, *args)
    def createObject(self, *args): return _yafrayinterface.xmlInterface_t_createObject(self, *args)
    def clearAll(self): return _yafrayinterface.xmlInterface_t_clearAll(self)
    def render(self, *args): return _yafrayinterface.xmlInterface_t_render(self, *args)
    def startScene(self, type = 0): return _yafrayinterface.xmlInterface_t_startScene(self, type)
    def setOutfile(self, *args): return _yafrayinterface.xmlInterface_t_setOutfile(self, *args)
    __swig_destroy__ = _yafrayinterface.delete_xmlInterface_t
    __del__ = lambda self : None;
xmlInterface_t_swigregister = _yafrayinterface.xmlInterface_t_swigregister
xmlInterface_t_swigregister(xmlInterface_t)

class memoryIO_t(colorOutput_t):
    __swig_setmethods__ = {}
    for _s in [colorOutput_t]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, memoryIO_t, name, value)
    __swig_getmethods__ = {}
    for _s in [colorOutput_t]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, memoryIO_t, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yafrayinterface.new_memoryIO_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def putPixel(self, *args): return _yafrayinterface.memoryIO_t_putPixel(self, *args)
    def flush(self): return _yafrayinterface.memoryIO_t_flush(self)
    def flushArea(self, *args): return _yafrayinterface.memoryIO_t_flushArea(self, *args)
    __swig_destroy__ = _yafrayinterface.delete_memoryIO_t
    __del__ = lambda self : None;
memoryIO_t_swigregister = _yafrayinterface.memoryIO_t_swigregister
memoryIO_t_swigregister(memoryIO_t)



