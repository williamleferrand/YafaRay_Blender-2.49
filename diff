2d1
< from __future__ import with_statement
11c10
< __author__ = ['Bert Buchholz, Alvaro Luna, Michele Castigliego, Rodrigo Placencia, Alexander Artemenko']
---
> __author__ = ['Bert Buchholz, Alvaro Luna, Michele Castigliego, Rodrigo Placencia']
93,95d91
< import logging
< import pickle
< import os.path
99d94
< from corefarm import Farm, AccessForbiddenError
104,114d98
< DEBUG = False
< HOME = os.environ.get('HOME', None)
< 
< if DEBUG and HOME is not None:
< 	logging.basicConfig(
< 		filename = os.path.join(HOME, 'yafaray-export.log'),
< 		level = logging.DEBUG,
< 		format = '%(asctime)s %(process)s/%(thread)s %(levelname)s %(name)s %(filename)s:%(lineno)s %(message)s',
< 	)
< log = logging.getLogger('yafaray.export')
< 
121,162d104
< 
< class Settings(object):
< 	""" A dict-like object which automatically
< 		saves all content to the Blender's Registry.
< 	"""
< 	def __init__(self, key_name = 'YafaRay'):
< 		self._data_filename = os.path.join(Blender.Get('datadir'), key_name + '.dat')
< 		self._load()
< 
< 	def __getitem__(self, key):
< 		return self._data.get(key, None)
< 
< 	def __setitem__(self, key, value):
< 		self._data[key] = value
< 		self._save()
< 
< 	def get(self, key, default = None):
< 		return self._data.get(key, default)
< 
< 	def update(self, item_tuples):
< 		""" Batch update of the values in the dict.
< 		"""
< 		for key, value in item_tuples:
< 			self._data[key] = value
< 		self._save()
< 
< 	def _load(self):
< 		try:
< 			with open(self._data_filename) as f:
< 				self._data = pickle.load(f)
< 		except:
< 			log.exception("Can't load settings from %r" % self._data_filename)
< 			self._data = {}
< 
< 	def _save(self):
< 		try:
< 			with open(self._data_filename, 'w') as f:
< 				pickle.dump(self._data, f)
< 		except:
< 			log.exception("Can't save settings to %r" % self._data_filename)
< 
< 
251c193,194
< def makeMenu(text, lst):
---
> def makeMenu(text, list):
> 	i = 0
254c197
< 	for i, c in enumerate(lst):
---
> 	for c in list:
255a199
> 		i = i + 1
2608,2680d2551
< # ### tab corefarm settings ### #
< 
< class clTabFarmSettings:
< 	def __init__(self):
< 		# events
< 		self.evShow = getUniqueValue()
< 		self.evEdit = getUniqueValue()
< 		self.tabNum = getUniqueValue()
< 		self.OutputMethodTypes = ["TGA", "HDR"]
< 		self.settings = s = Settings("YafaRay.corefarm")
< 
< 		# gui elements
< 		self.guiLogin = Draw.Create(s.get("login", "")) # string
< 		self.guiKey = Draw.Create(s.get("key", "")) # string
< 		self.guiRenderOutputMethod = Draw.Create(s.get("output_method", 0)) # dropdown
< 		self.guiGHZ = Draw.Create(s.get("ghz", 50)) # string
< 
< 	def draw(self, height):
< 		global PanelHeight
< 
< 		drawText(10, height, "Corefarm settings", "large")
< 		height = drawSepLineText(10, height, 320, "Credentials")
< 
< 		self.guiLogin = Draw.String("Login: ", self.evEdit, 10, height, 150,
< 			guiWidgetHeight, self.guiLogin.val, 50, "Your login at corefarm.com")
< 
< 		self.guiKey = Draw.String("Password: ", self.evEdit, 170, height, 150,
< 			guiWidgetHeight, self.guiKey.val, 50, "Your password at corefarm.com")
< 
< 		height = drawSepLineText(10, height, 320, "Output method")
< 		drawText(20, height+2, "Select the output method:", "normal")
< 		self.guiRenderOutputMethod = Draw.Menu(makeMenu("Output method", self.OutputMethodTypes),
< 			self.evEdit, 180, height-2, 150, guiWidgetHeight, self.guiRenderOutputMethod.val, "Selects output method for render result")
< 
< 		height = drawSepLineText(10, height, 320, "Farm resources")
< 
< 		prev_value = [self.guiGHZ.val]
< 		def round_value(event, value):
< 			""" Callback to dynamically
< 				round CPU power value
< 			"""
< 			step = 5
< 			round = lambda x: (x + (step / 2)) / step * step
< 			log.debug('CPU power changed from %s to %s' % (prev_value[0], value))
< 			delta = value - prev_value[0]
< 			if delta == 1:
< 				value = round(value + (step / 2))
< 			elif delta == -1:
< 				value = round(value - (step / 2))
< 			else:
< 				value = round(value)
< 			self.guiGHZ.val = value
< 			prev_value[0] = value
< 
< 		self.guiGHZ = Draw.Number("CPU power: ", self.evEdit, 10,
< 			height, 150, guiWidgetHeight, self.guiGHZ.val, 1.0, 495.0, "Select CPU power to use in GHZ.",
< 			round_value)
< 
< 		PanelHeight = height
< 
< 	def event(self):
< 		log.debug('Saving settings')
< 		items = (
< 			('login', self.guiLogin.val),
< 			('key', self.guiKey.val),
< 			('output_method', self.guiRenderOutputMethod.val),
< 			('ghz', self.guiGHZ.val),
< 		)
< 		self.settings.update(items)
< 
< # ### end clTabFarmSettings ### #
< 
< 
2742c2613
< 	elif evt in (evRender, evRenderAnim, evRenderView, evRenderOnCorefarm):
---
> 	elif evt == evRender or evt == evRenderAnim or evt == evRenderView:
2756,2760d2626
< 		if evt == evRenderOnCorefarm:
< 			log.debug("Changing output settings to produce XML")
< 			TabRenderer.guiRenderOutputMethod.val = TabRenderer.OutputMethodTypes.index("XML")
< 			TabRenderer.event()
< 
2770,2783c2636,2637
< 		if evt in (evRender, evRenderOnCorefarm):
< 			output = yRender.render()
< 			if evt == evRenderOnCorefarm:
< 				farm = Farm(
< 					TabFarmSettings.guiLogin.val,
< 					TabFarmSettings.guiKey.val,
< 					TabFarmSettings.guiRenderOutputMethod.val,
< 					TabFarmSettings.guiGHZ.val,
< 				)
< 				try:
< 					farm.render(output[1])
< 				except AccessForbiddenError:
< 					button_event(TabFarmSettings.evShow)
< 
---
> 		if evt == evRender:
> 			yRender.render()
2791,2794d2644
< 	elif evt == TabFarmSettings.evShow:
< 		Tab = TabFarmSettings.tabNum
< 	elif evt == TabFarmSettings.evEdit:
< 		TabFarmSettings.event()
2920,2922d2769
< 	height -= 10 + largeButtonHeight
< 	Draw.PushButton("Render on corefarm", evRenderOnCorefarm, 10, height, 130 + 2 * 85 + 2 * 10, largeButtonHeight, "Render image on corefarm.com")
< 
2931,2933d2777
< 	height -= 10 + largeButtonHeight
< 	Draw.PushButton("Farm settings", TabFarmSettings.evShow, 10, height, 74, largeButtonHeight, "Edit farm settings")
< 
2949,2950d2792
< 	elif Tab == TabFarmSettings.tabNum: # settings for corefarm
< 		TabFarmSettings.draw(height)
2973,2974c2815,2816
< 	Tab, noTab, helpTab, evShowHelp, evRenderView, evRender, evRenderAnim, evRenderOnCorefarm,\
< 	TabMaterial, TabWorld, TabRenderer, TabObject, TabFarmSettings, uniqueCounter, libmat, PanelHeight
---
> 	Tab, noTab, helpTab, evShowHelp, evRenderView, evRender, evRenderAnim,\
> 	TabMaterial, TabWorld, TabRenderer, TabObject, uniqueCounter, libmat, PanelHeight
2995d2836
< 	evRenderOnCorefarm = getUniqueValue()
3001d2841
< 	TabFarmSettings = clTabFarmSettings()
3005c2845
< 	main()
---
>     main()
